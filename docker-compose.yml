version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: work-request-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: work_request_db
      POSTGRES_USER: work_request_user
      POSTGRES_PASSWORD: work_request_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - work-request-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U work_request_user -d work_request_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Go Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: work-request-backend
    restart: unless-stopped
    environment:
      - SERVER_PORT=8080
      - SERVER_HOST=0.0.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=work_request_user
      - DB_PASSWORD=work_request_password
      - DB_NAME=work_request_db
      - DB_SSL_MODE=disable
      - JWT_SECRET=your_super_secret_jwt_key_change_in_production
      - JWT_EXPIRY=24h
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:80,http://frontend:80,http://178.128.54.249:3000
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - work-request-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: work-request-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_BASE_URL=http://178.128.54.249:8080/api
      - REACT_APP_ENABLE_NOTIFICATIONS=true
      - REACT_APP_ENABLE_EXPORT=true
      - REACT_APP_ENABLE_FILTERS=true
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - work-request-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (Optional - for session management)
  redis:
    image: redis:7-alpine
    container_name: work-request-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - work-request-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: work-request-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - work-request-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  work-request-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
